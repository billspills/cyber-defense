\documentclass[style=elcolors, mode=present]{powerdot}
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{epsfig}
\usepackage{anyfontsize}
\usepackage{url}
\pdsetup{
 lf=Cyber Defense Overview,
 rf=Active Defense
}
\title{Active Defense and Prevention}
\author{Coleman Kane\\Coleman.Kane@ge.com}
\begin{document}
\maketitle

\begin{slide}{Introduction}
\textbf{Active Defense} and \textbf{Prevention} are the strategies employed to prevent, obstruct, or otherwise block unwanted
access to the system. This lecture will discuss some preventative systems, an overview of their operation, as well as measures
which can be taken at the application configuration level for common services to enforce protections against undesirable access.
\end{slide}

\begin{slide}{Firewalls}
 IP firewalls can be used to parse the contents of packet headers and take action based upon the value of certain packet
 header fields. In a \textbf{stateful} IP firewall, one action that can be taken is to update global state variables within 
 a table which can then be used elsewhere in the firewall to conditionally apply rules/actions.
\end{slide}

\begin{slide}{Firewall Example}
 Some examples using Linux's \texttt{iptables}. \texttt{iptables} uses a firewall appraoch where a list of firewall rules
 are evaluated against every packet, and the first matching rule is used to determine the action to be taken. Linux supports
 a "default" action, typically either a permissive "\textbf{ACCEPT}" or restrictive "\textbf{DROP}" action.
 \begin{itemize}
  \item{\tiny\texttt{iptables -A INPUT -s 192.168.0.4 -j ACCEPT \# Allow one client if default is DROP}}
  \item{\tiny\texttt{iptables -A INPUT -s 192.168.0.0/24 -j ACCEPT \# Allow an entire network}}
  \item{\tiny\texttt{iptables -A INPUT -p tcp --dport 6881 -j ACCEPT \# Allow all hosts on a certain port}}
 \end{itemize}

 Examples from CentOS IPTables HowTo\cite{CentOSIPTables:2014:Sep}
\end{slide}

\begin{slide}{Proxy Servers}
 A \textbf{proxy server} is an application-level gateway which can be used to control access, hide implementation details from view,
 and add visibility to application traffic. Some example proxy servers are:
 \begin{itemize}
  \item Privoxy {\tiny\texttt{\url{http://www.privoxy.org/}}}
  \item Squid {\tiny\texttt{\url{http://www.squid-cache.org/}}}
  \item Apache mod\_proxy {\tiny\texttt{\url{http://httpd.apache.org/docs/current/mod/mod_proxy.html}}}
 \end{itemize}
\end{slide}

\begin{slide}{Proxy Server Uses}
 A few applications for proxy servers:
 \begin{itemize}
  \item {\small Place an HTTPS proxy server in front of an HTTP server, gaining visibility on the encrypted network traffic without
                sacrificing confidentiality or authentication}
  \item {\small Route user traffic through a central device to enable filtering and policies}
  \item {\small Conceal the underlying organization of a system using URL "rewrite" rules}
  \item {\small Add authentication in front of an application without exposing the auth system to application vulnerabilities}
 \end{itemize}
\end{slide}

\begin{slide}{Network Applications}
 Careful selection and configuration of network applications to provide desirable services (e.g. file sharing, e-mail, etc.) is an
 important security practice. Keeping an inventory of your installed application base is also important to helping manage the
 patching of your network. A few examples with discussion follow.
\end{slide}

\begin{slide}{File Sharing}
 A common legacy Internet file-sharing protocol is called FTP (File Transfer Protocol). Many FTP servers come pre-configured with
 authorization for unauthenticated "anonymous" users to write arbitrary into a public folder.

 The SSH protocol (Secure SHell) now provides a similar encapsualted protocol called SFTP (Secure File Transfer Protocol), and there
 exist many Windows-compatible applications compatible with it. Replacing FTP with SFTP where it is needed can be an effective mitication.
\end{slide}

\begin{slide}{E-Mail}
 The original SMTP, POP3, and IMAP protocols were originally designed as plain-text protocols with simple authentication methods. Since
 their publication, a number of new features have been added:
 \begin{itemize}
  \item STARTTLS supporting secure-sockets with modern encryption
  \item Challenge-based authentication
  \item Mandatory authentication for non-local SMTP
 \end{itemize}
\end{slide}

\begin{slide}{Interactive CLI}
 Historically, protocols such as Telnet and RSH (Remote SHell) were used to provide access. These protocols lacked modern authentication
 and encryption. The SSH (Secure SHell) protocol was designed as a replacement for all the use-cases of these protocols, and to overcome
 some of the inherent security flaws.
\end{slide}

\begin{slide}{References}
 \bibliographystyle{plain}
 \bibliography{cyberdef}
\end{slide}
\end{document}
